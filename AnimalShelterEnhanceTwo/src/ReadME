	The original artifact is a Python single page application using the Dash framework, to prototype the user interface and its components. The Radio buttons allow the user to select between three dog recuse types (water, mountain and disaster), to populate the table and pie chart below. The radio buttons are built using queries to select a specif sex (male or female) and to select a rescue type in a certain age range. The user can then select a row on the table to update the interactive map, which in turn places a marker on the map based on the latitude and longitude from the MongoDB. Full CRUD implementation was created, but only the read method was utilized for the SPA. (Same text as milestone one)

The reason for the selection was to expand on or add additional algorithm methods to the user interface. The original artifact has a simple radio button component that allows the user to select between three rescue types. Behind the scenes, the query is built to only show certain dogs per rescue type in a specific age range. Thus, providing the user with the most viable rescue dog options for their rescue operations. To enhance this artifact, I chose to add two more UI components that the user would interact with. Using Vaadin components, I created two combo boxes that are tied together in their query. Such that the user can select any animal type and select an age range. This adds more customization to what the user can search for, based on the data from the Mongo environment. Additionally, the combo box pair will also update the grid and pie chart, just like the radio buttons. This can be further refactored to use multi selection comb boxes to select a dog and bird, plus a specific age range or exact age_upon_outcome.

After testing the UI component and seeing the grid and pie chart update accordingly, I believe I have achieved the enchantment plan outline in module one. One drawback is that the radio button broke. The first three rescue types present a blank grid and pie chart, but the reset button works. Further debugging and testing is required to ensure the radio and combo components work separately. Now that I have established a structure for algorithms and database calls, I can expand to create fun queries, such as livestock count based on zip code in Austin Texas. Research into latitude/longitude conversion to zip code in Java will be required.  

The main learning outcome from this enchantment was the utilization of data types and strings within the Java logic. The biggest hurdle was trying to build a method that displayed an age range, when the data types were age_upon_outcome_in_weeks. This called for a conversion function and logic to ignore certain case field if not present. The use of !=null exceptions and filters helped to elevate the issues for multiple conditions. The intent is to have the radio button (component A) and the combo boxes (component B) work independently, such that when I select either or, it clears the gird and pie chart, and displays the new data based on the component selection of A or B. Creating the UI and listeners was simple (minus the string naming), but organizing the algorithm logic was the main challenge. 

Resources and tools used: 
    • Combo box component: Vaadin Components. component | Vaadin components. (n.d.). https://vaadin.com/docs/latest/components/combo-box 
    • Gupta, L. (2022, October 1). Vaadin ComboBox examples. HowToDoInJava. https://howtodoinjava.com/vaadin/vaadin-combobox-examples/ 
    • Nukala, V. (2021, July 7). Java 8 streams filter with multiple conditions examples. Java Code Geeks. https://www.javacodegeeks.com/2021/07/java-8-streams-filter-with-multiple-conditions-examples.html 
    • Gupta, L. (2024, April 30). Java stream filter on multiple conditions using predicates. HowToDoInJava. https://howtodoinjava.com/java8/stream-multiple-filters-example/ 
