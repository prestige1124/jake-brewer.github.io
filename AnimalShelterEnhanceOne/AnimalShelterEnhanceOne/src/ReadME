The original artifact is a Python single page application using the Dash framework, to prototype the user interface and its components. The Radio buttons allow the user to select between three dog recuse types (water, mountain and disaster), to populate the table and pie chart below. The radio buttons are built using queries to select a specif sex (male or female) and to select a rescue type in a certain age range. The user can then select a row on the table to update the interactive map, which in turn places a marker on the map based on the latitude and longitude from the MongoDB. Full CRUD implementation was created, but only the read method was utilized for the SPA. 

	The original artifact is a simple single page application, will ample room to expand queries and upgrade key comments. When assessing the metrics for the enhancements, I felt that this artifact would be perfect to encapsulate all three areas of (Software design and engineering, Algorithms and data structures and Databases). The artifact shows my ability to implement CRUD methods to fetch or edit data from the Mongo database. Additionally, it shows UI design and implementation, such that the UI components are interactive and easy to use for all user types. 
	The first enhancement focused on translating the Python code to Java. This included building a Java framework work using Vaadin and Spring Boot. When researching, I made a change from React to Vaadin, as Vaadin offered all the components I needed, plus the ability to convert to a full stack application. The only major issue with Vaadin is it requires licensing for certain components. Thus, I utilized XChart and Leaflet to build the pie chart and map components. The layout is built almost identically to the Python Dash layout, with the same functions for the UI components. Minor touches to the rescue type queries are still required. 

After reviewing the work I have completed, I feel confident I have achieved a vast majority of the enchantment planned, minus two queries and the pie cart connection. The majority of time came from setting up the environment. I create at least 4 new projects until I found a template build in Vaadin that set up all the file structure including the pom.xml, repository, frontend HTML, dependencies and test Java. This structure fixed many of the naming references in the file structure and helped to build the dashboard view. Though read is the only method implemented, I still plan on implementing the create, update and delete methods. 

The biggest take away form this enchantment was the design and implantation of components the translation. In hindsight, I should have stuck with React, and researched if licensing was required to use certain components within Vaadin. I wanted to avoid Java script and use components from Vaadin directly for better modular control. The biggest challenge was trying to translate the Python code to Java as a one for one (building functions or methods at a time). First attempt was to create the CRUD methods and test cases, similar to how it was built in the previous term. This process ran into errors with the database collection when trying to add, edit and delete animal data. After reviewing my old artifact, I noticed it was only utilizing read methods. I scrapped that project and started a new one, focusing directly on the UI layout first. This process provided better results as I was able to build the UI and test my database connection by populating the grid. The lack of a plan on what components or UI elements to build first was my downfall this week, as too much time was wasted trying to get a working SPA. 

Resoreuces and tools used:
    • Knowm. (n.d.). XChart/xchart/src/main/java/org/knowm/xchart at develop · knowm/XChart. GitHub. https://github.com/knowm/XChart/tree/develop/xchart/src/main/java/org/knowm/xchart
    • Spring initializr. (n.d.). Spring Initializr. https://start.spring.io/
    • Grid component | Vaadin components. (n.d.). https://vaadin.com/docs/latest/components/grid
    • Radio Button component | Vaadin components. (n.d.). https://vaadin.com/docs/latest/components/radio-button
    • Documentation - Leaflet - a JavaScript library for interactive maps. (n.d.). https://leafletjs.com/reference.html#interactive-layer
    • https://www.geeksforgeeks.org/java/creating-interactive-maps-and-geo-visualizations-in-java/
