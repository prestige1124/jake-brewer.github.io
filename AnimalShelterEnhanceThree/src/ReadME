The original artifact is a Python single page application using the Dash framework, to prototype the user interface and its components. The Radio buttons allow the user to select between three dog recuse types (water, mountain and disaster), to populate the table and pie chart below. The radio buttons are built using queries to select a specif sex (male or female) and to select a rescue type in a certain age range. The user can then select a row on the table to update the interactive map, which in turn places a marker on the map based on the latitude and longitude from the MongoDB. Full CRUD implementation was created, but only the read method was utilized for the SPA. (Same text as milestone two)

	The reason for selection of this artifact is to expand upon the single page application. Given its original state of using python with Dash (simple prototype build); I wanted to build additional component such as a login page and API endpoints. The login page will add a layer of security to prevent unauthorized access from tampering with the data, and API endpoints to create modularity within the application. The login page will utilize a token systems, to avoid directly hard-coding the user and password. Utilization of API’s allows for the application to be modular, opening doors for a mobile build. 

Originally, I had planned to use React, but settled with Vaadin after researching how simple it is to integrate Java and Spring Boot. Additionally, the Vaadin documents and components page shows the actual component, and allows me to interact with it paired with the code snippet below. This helped me to gain familiarity with a new tool and expand outside of of the MEAN or MERN stack method. The two main updates is to fully integrate a token system, similar to how I set up one in the CS-465 Full Stack Development term, and build API endpoints.

As I was enhancing the artifact, I did not quit realize that I had set the foundation for a full stack application when translating from Python to Java. By creating the frontend components with Vaadin, backend with Spring Boot and database with Mongo; I was 80% of the way there. The main addition to this enhancement was to close off the stack with proper security measures and creating modular components. This was tested using Postman to GET, (POST, PUT and DELETE to follow). The main challenges was setting up the token to create a unique string each time the user logs in. 

    • Spring-Projects. (n.d.). Spring-security-samples/servlet/spring-boot/java/hello-security-explicit/src/main/java/example/securityconfiguration.java at main · spring-projects/spring-security-samples. GitHub. https://github.com/spring-projects/spring-security-samples/blob/main/servlet/spring-boot/java/hello-security-explicit/src/main/java/example/SecurityConfiguration.java 
    • Bezkoder. (n.d.). Bezkoder/spring-boot-login-example: Spring boot login and registration example with mysql, JWT, REST API - spring boot spring security login example. GitHub. https://github.com/bezkoder/spring-boot-login-example/tree/master 
    • GeeksforGeeks. (2025, July 23). Easiest way to create REST API using Spring Boot. https://www.geeksforgeeks.org/advance-java/easiest-way-to-create-rest-api-using-spring-boot/ 
